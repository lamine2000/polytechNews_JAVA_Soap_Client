
package com.service;

import java.util.List;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.FaultAction;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 3.0.2
 * Generated source version: 3.0
 * 
 */
@WebService(name = "userManager", targetNamespace = "http://service/")

public interface UserManager {


    /**
     * 
     * @param user
     * @return
     *     returns java.lang.Boolean
     * @throws SQLException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "authenticate", targetNamespace = "http://service/", className = "service.Authenticate")
    @ResponseWrapper(localName = "authenticateResponse", targetNamespace = "http://service/", className = "service.AuthenticateResponse")
    @Action(input = "http://service/userManager/authenticateRequest", output = "http://service/userManager/authenticateResponse", fault = {
        @FaultAction(className = SQLException_Exception.class, value = "http://service/userManager/authenticate/Fault/SQLException")
    })
    public Boolean authenticate(
        @WebParam(name = "user", targetNamespace = "")
        User user)
        throws SQLException_Exception
    ;

    /**
     * 
     * @param userToAdd
     * @param typeUser
     * @param tokenAdmin
     * @return
     *     returns java.lang.Boolean
     * @throws SQLException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addUser", targetNamespace = "http://service/", className = "service.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://service/", className = "service.AddUserResponse")
    @Action(input = "http://service/userManager/addUserRequest", output = "http://service/userManager/addUserResponse", fault = {
        @FaultAction(className = SQLException_Exception.class, value = "http://service/userManager/addUser/Fault/SQLException")
    })
    public Boolean addUser(
        @WebParam(name = "tokenAdmin", targetNamespace = "")
        String tokenAdmin,
        @WebParam(name = "userToAdd", targetNamespace = "")
        User userToAdd,
        @WebParam(name = "typeUser", targetNamespace = "")
        String typeUser)
        throws SQLException_Exception
    ;

    /**
     * 
     * @param tokenAdmin
     * @return
     *     returns java.util.List<service.User>
     * @throws SQLException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listUsers", targetNamespace = "http://service/", className = "service.ListUsers")
    @ResponseWrapper(localName = "listUsersResponse", targetNamespace = "http://service/", className = "service.ListUsersResponse")
    @Action(input = "http://service/userManager/listUsersRequest", output = "http://service/userManager/listUsersResponse", fault = {
        @FaultAction(className = SQLException_Exception.class, value = "http://service/userManager/listUsers/Fault/SQLException")
    })
    public List<User> listUsers(
        @WebParam(name = "tokenAdmin", targetNamespace = "")
        String tokenAdmin)
        throws SQLException_Exception
    ;

    /**
     * 
     * @param idUser
     * @param userParameters
     * @param typeUser
     * @param tokenAdmin
     * @return
     *     returns java.lang.Boolean
     * @throws SQLException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateUser", targetNamespace = "http://service/", className = "service.UpdateUser")
    @ResponseWrapper(localName = "updateUserResponse", targetNamespace = "http://service/", className = "service.UpdateUserResponse")
    @Action(input = "http://service/userManager/updateUserRequest", output = "http://service/userManager/updateUserResponse", fault = {
        @FaultAction(className = SQLException_Exception.class, value = "http://service/userManager/updateUser/Fault/SQLException")
    })
    public Boolean updateUser(
        @WebParam(name = "tokenAdmin", targetNamespace = "")
        String tokenAdmin,
        @WebParam(name = "userParameters", targetNamespace = "")
        User userParameters,
        @WebParam(name = "typeUser", targetNamespace = "")
        String typeUser,
        @WebParam(name = "idUser", targetNamespace = "")
        int idUser)
        throws SQLException_Exception
    ;

    /**
     * 
     * @param idUser
     * @param tokenAdmin
     * @return
     *     returns java.lang.Boolean
     * @throws SQLException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteUser", targetNamespace = "http://service/", className = "service.DeleteUser")
    @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "http://service/", className = "service.DeleteUserResponse")
    @Action(input = "http://service/userManager/deleteUserRequest", output = "http://service/userManager/deleteUserResponse", fault = {
        @FaultAction(className = SQLException_Exception.class, value = "http://service/userManager/deleteUser/Fault/SQLException")
    })
    public Boolean deleteUser(
        @WebParam(name = "tokenAdmin", targetNamespace = "")
        String tokenAdmin,
        @WebParam(name = "idUser", targetNamespace = "")
        int idUser)
        throws SQLException_Exception
    ;

}
